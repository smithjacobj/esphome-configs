esphome:
  name: "emporiavue2_unit2"
  friendly_name: "vue2 unit #2"

external_components:
  - source: github://emporia-vue-local/esphome@dev
    components:
      - emporia_vue

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended

# Enable Home Assistant API
api:
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

ota:
  # Create a secure password for pushing OTA updates.
  password: !secret EMPORIA_VUE_OTA_PASSWORD

# Enable logging
logger:

wifi:
  networks:
    <<: !secret WIFI_NETWORKS

preferences:
  # the default of 1min is far too short--flash chip is rated
  # for approx 100k writes.
  flash_write_interval: "48h"

output:
  - platform: ledc
    pin: GPIO12
    id: buzzer

rtttl:
  output: buzzer
  on_finished_playback:
    - logger.log: 'Song ended!'

button:
  - platform: template
    name: "Two Beeps"
    on_press:
      - rtttl.play: "two short:d=4,o=5,b=100:16e6,16e6"

light:
  - platform: status_led
    name: "D3_LED"
    pin: 23
    restore_mode: ALWAYS_ON

i2c:
  sda: 21
  scl: 22
  scan: false
  frequency: 200kHz  # recommended range is 50-200kHz
  id: i2c_a

time:
  - platform: sntp
    id: my_time

# these are called references in YAML. They allow you to reuse
# this configuration in each sensor, while only defining it once
.defaultfilters:
  - &moving_avg
    # we capture a new sample every 0.24 seconds, so the time can
    # be calculated from the number of samples as n * 0.24.
    sliding_window_moving_average:
      # we average over the past 2.88 seconds
      window_size: 12
      # we push a new value every 1.44 seconds
      send_every: 6
  - &invert
    # invert and filter out any values below 0.
    lambda: 'return max(-x, 0.0f);'
  - &pos
    # filter out any values below 0.
    lambda: 'return max(x, 0.0f);'
  - &abs
    # take the absolute value of the value
    lambda: 'return abs(x);'

sensor:
  - platform: emporia_vue
    i2c_id: i2c_a
    phases:
      - id: phase_a  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: BLACK  # Vue device wire color
        calibration: 0.022739  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula <in-use calibration value> * <accurate voltage> / <reporting voltage>
        voltage:
          name: "Phase A Voltage"
          filters: [*moving_avg, *pos]
        frequency:
          name: "Phase A Frequency"
          filters: [*moving_avg, *pos]
      - id: phase_b  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: RED  # Vue device wire color
        calibration: 0.021714  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula <in-use calibration value> * <accurate voltage> / <reporting voltage>
        voltage:
          name: "Phase B Voltage"
          filters: [*moving_avg, *pos]
        phase_angle:
          name: "Phase B Phase Angle"
          filters: [*moving_avg, *pos]
    ct_clamps:
      # totals are measured by unit1
      # - phase_id: phase_a
      #   input: "A"  # Verify the CT going to this device input also matches the phase/leg
      #   power:
      #     name: "Phase A Power"
      #     id: phase_a_power
      #     device_class: power
      #     filters: [*moving_avg, *pos]
      # - phase_id: phase_b
      #   input: "B"  # Verify the CT going to this device input also matches the phase/leg
      #   power:
      #     name: "Phase B Power"
      #     id: phase_b_power
      #     device_class: power
      #     filters: [*moving_avg, *pos]
      # Pay close attention to set the phase_id for each breaker by matching it to the phase/leg it connects to in the panel
      - { phase_id: phase_b, input:  "1", power: { name: "South Hall", id:  cir1, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_a, input:  "2", power: { name: "Upstairs Lights", id:  cir2, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input:  "3", power: { name: "Living Room", id:  cir3, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_a, input:  "4", power: { name: "Bedrooms", id:  cir4, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input:  "5", power: { name: "Furnace", id:  cir5, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_a, input:  "6", power: { name: "Craft & Guest Room Lights", id:  cir6, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input:  "7", power: { name: "Garage Lights", id:  cir7, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input:  "8", power: { name: "Garage Outlets 2 (Right)", id:  cir8, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_a, input:  "9", power: { name: "Laundry Room", id:  cir9, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input: "10", power: { name: "Upstairs Smoke Detectors", id: cir10, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input: "11", power: { name: "Upstairs GFCI", id: cir11, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_a, input: "12", power: { name: "Dryer Leg 1", id: cir12, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_a, input: "13", power: { name: "Master Bath Floor Heat Leg 1", id: cir13, filters: [ *moving_avg, *pos ] } }
      - { phase_id: phase_b, input: "14", power: { name: "Garage 240v", id: cir14, filters: [ *moving_avg, *pos, multiply: 2 ] } }
      # these inputs are currently unused
      # - { phase_id: phase_a, input: "15", power: { name: "Unnamed Circuit 15", id: cir15, filters: [ *moving_avg, *pos ] } }
      # - { phase_id: phase_a, input: "16", power: { name: "Unnamed Circuit 16", id: cir16, filters:
      #   [ *moving_avg, *pos ] } }
  # totals are calculated on unit1
  # - platform: template
  #   name: "Total Power"
  #   lambda: return id(phase_a_power).state + id(phase_b_power).state;
  #   update_interval: 1s
  #   id: total_power
  #   unit_of_measurement: "W"
  # - platform: total_daily_energy
  #   name: "Total Daily Energy"
  #   power_id: total_power
  #   accuracy_decimals: 0
  - { power_id:  cir1, platform: total_daily_energy, accuracy_decimals: 0, name: "South Hall Daily Energy" }
  - { power_id:  cir2, platform: total_daily_energy, accuracy_decimals: 0, name: "Upstairs Lights Daily Energy" }
  - { power_id:  cir3, platform: total_daily_energy, accuracy_decimals: 0, name: "Living Room Daily Energy" }
  - { power_id:  cir4, platform: total_daily_energy, accuracy_decimals: 0, name: "Bedrooms Daily Energy" }
  - { power_id:  cir5, platform: total_daily_energy, accuracy_decimals: 0, name: "Furnace Daily Energy" }
  - { power_id:  cir6, platform: total_daily_energy, accuracy_decimals: 0, name: "Craft & Guest Room Lights Daily Energy" }
  - { power_id:  cir7, platform: total_daily_energy, accuracy_decimals: 0, name: "Garage Lights Daily Energy" }
  - { power_id:  cir8, platform: total_daily_energy, accuracy_decimals: 0, name: "Garage Outlets 2 (Right) Daily Energy" }
  - { power_id:  cir9, platform: total_daily_energy, accuracy_decimals: 0, name: "Laundry Room Daily Energy" }
  - { power_id: cir10, platform: total_daily_energy, accuracy_decimals: 0, name: "Upstairs Smoke Detectors Daily Energy" }
  - { power_id: cir11, platform: total_daily_energy, accuracy_decimals: 0, name: "Upstairs GFCI Daily Energy" }
  - { power_id: cir12, platform: total_daily_energy, accuracy_decimals: 0, name: "Dryer Leg 1 Daily Energy" }
  - { power_id: cir13, platform: total_daily_energy, accuracy_decimals: 0, name: "Master Bath Floor Heat Leg 1 Daily Energy" }
  - { power_id: cir14, platform: total_daily_energy, accuracy_decimals: 0, name: "Garage 240v Daily Energy" }
  # these inputs are currently unused
  # - { power_id: cir15, platform: total_daily_energy, accuracy_decimals: 0, name: "Unnamed Circuit 15" }
  # - { power_id: cir16, platform: total_daily_energy, accuracy_decimals: 0, name: "Unnamed Circuit 16" }
