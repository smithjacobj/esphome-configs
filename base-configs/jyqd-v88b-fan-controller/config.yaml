substitutions:
  # GPIO connections to BLDC motor controller (MC)
  # IMPORTANT: ensure all I/O is isolated between ESP and MC (e.g. optocoupler)
  SPEED_PIN: GPIO6 # PWM connects VR to 5V on MC
  SPEED_SENSOR_PIN: GPIO10 # Connect M to (MC)GND; read the optocoupler signal
  # NOTE: "off" is M floating; connecting to either 5V or (MC)GND chooses direction
  REVERSE_PIN: GPIO7 # connects ZF to (MC)GND on MC. Otherwise, ZF is floating (forward)

  # Target min/max speeds in RPM as read by SPEED_SENSOR_PIN
  # TODO: determine what rate (pulses/rotation) the SPEED_SENSOR_PIN outputs
  MIN_SPEED: "25"
  MAX_SPEED: "150"
  # The motor controller likely has an input spec for PWM; make sure this falls in that range and is
  # supported by your ESP platform
  MC_PWM_FREQ: 4882Hz # 14 bits of resolution available on ESP32, see
                      # https://esphome.io/components/output/ledc#recommended-frequencies 
  # TODO: use a low value and turn it up as we test. This controls the maximum allowed called for speed.
  MAX_PWM_DUTY: "0.05"

packages:
  esp32-c3: !include ../../board-configs/esp32-c3.yaml

esphome:
  name: ${DEVICE_NAME}
  friendly_name: ${DEVICE_FRIENDLY_NAME}

logger:
  level: ${LOG_LEVEL}

wifi:
  networks:
    <<: !secret WIFI_NETWORKS

api:
ota:

output:
  - platform: template
    id: fan_direction
    type: binary
    write_action:
      # toggle direction
      - if:
          condition:
            lambda: return state;
          then:
            output.turn_off: fan_reverse_output
          else:
            output.turn_on: fan_reverse_output
  - platform: gpio
    id: fan_reverse_output
    pin: ${REVERSE_PIN}

  # this is the raw GPIO PWM output to the fan controller  
  - platform: ledc
    pin:
      number: ${SPEED_PIN}
      mode:
        input: true
        pulldown: true
    id: fan_speed_pwm_control
    frequency: ${MC_PWM_FREQ}
    max_power: ${MAX_PWM_DUTY}

sensor:
  # handy for troubleshooting
  - platform: wifi_signal
    name: WiFi Signal
  - platform: pulse_counter
    internal: true # if we decide to expose this we'll do it as a template exposing RPM
    id: fan_speed_sensor
    pin: ${SPEED_SENSOR_PIN}

fan:
  # this is the actual control we want exposed to HA
  - platform: speed
    output: fan_speed_pwm_control
    name: Fan Speed
    direction_output: fan_direction
    restore_mode: RESTORE_DEFAULT_OFF
